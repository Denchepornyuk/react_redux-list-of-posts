{"version":3,"sources":["store/posts.js","store/loading.js","store/search.js","store/index.js","Post.js","User.js","Comments.js","PostsPage.js","PostList/PostList.js","api/api.js","PostList/index.js","App.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","isLoadingReducer","isLoading","setQueryReducer","search","query","getIsLoading","state","getPosts","getQuery","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","Post","_ref","postContent","react_default","a","createElement","Fragment","className","title","body","User","person","address","name","email","street","Comments","postComments","map","comment","src_User","PostList","post","src_Post","user","src_Comments","comments","setPosts","setIsLoading","setQuery","mergeData","postsData","commentsData","usersData","Object","objectSpread2","find","id","userId","filter","postId","onClick","_ref2","_ref3","dataFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","then","response","json","sent","slicedToArray","stop","lib","debounceTimeout","placeholder","onChange","_ref5","target","value","trim","toLowerCase","PostsPage","_ref4","includes","connect","App","src_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ef5cdffc.chunk.js","sourcesContent":["const SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","const SET_ISLOADING = 'SET_ISLOADING';\n\nexport const setIsLoading = isLoading => ({\n  type: SET_ISLOADING,\n  isLoading,\n});\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case SET_ISLOADING:\n      return action.isLoading;\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst setQueryReducer = (search = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return search;\n  }\n};\n\nexport default setQueryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport isLoadingReducer from './loading';\nimport postsReducer from './posts';\nimport setQueryReducer from './search';\n\nexport const getIsLoading = state => state.isLoading;\nexport const getPosts = state => state.posts;\nexport const getQuery = state => state.query;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: isLoadingReducer,\n  query: setQueryReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\n\nconst Post = ({ postContent }) => (\n  <>\n    <h1 className=\"post__title\">{postContent.title}</h1>\n    <p className=\"post__body\">{postContent.body}</p>\n  </>\n);\n\nPost.propTypes = { postContent: PropsTypes.objectOf.isRequired };\n\nexport default Post;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\n\nconst User = ({ person, address }) => (\n  <div className=\"post__author\">\n    <p className=\"author__name\">\n      {person.name}\n    </p>\n    <p className=\"author__email\">\n      {person.email}\n    </p>\n    <address className=\"author__address\">\n      {address\n        ? person.address.street\n        : ''\n      }\n    </address>\n  </div>\n);\n\nUser.propTypes = {\n  person: PropsTypes.objectOf.isRequired,\n  address: PropsTypes.bool.isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport User from './User';\n\nconst Comments = ({ postComments }) => (\n  <div className=\"post__comments\">\n    {postComments.map(comment => (\n      <div className=\"comment\">\n        <p>\n          {comment.body}\n        </p>\n        <User person={comment} />\n      </div>\n    ))}\n  </div>\n);\n\nComments.propTypes = { postComments: PropsTypes.arrayOf.isRequired };\n\nexport default Comments;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport Post from './Post';\nimport User from './User';\nimport Comments from './Comments';\n\nconst PostList = ({ posts }) => (\n  posts.map(post => (\n    <section className=\"post\">\n      <Post postContent={post} />\n      <User\n        person={post.user}\n        address\n      />\n      <Comments postComments={post.comments} />\n    </section>\n  ))\n);\n\nPostList.propTypes = { posts: PropsTypes.arrayOf.isRequired };\n\nexport default PostList;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport { DebounceInput as Search } from 'react-debounce-input';\nimport {\n  getPostsFromServer,\n  getCommentsFromServer,\n  getUsersFromServer,\n} from '../api/api';\n\nimport PostsPage from '../PostsPage';\n\nconst PostList = ({\n  posts,\n  isLoading,\n  query,\n  setPosts,\n  setIsLoading,\n  setQuery,\n}) => {\n  const loadData = async() => {\n    setIsLoading(true);\n\n    const [postsData, commentsData, usersData] = await Promise.all(\n      [getPostsFromServer(), getCommentsFromServer(), getUsersFromServer()]\n    );\n\n    const dataFromServer = mergeData(postsData, commentsData, usersData);\n\n    setPosts(dataFromServer);\n\n    setIsLoading(false);\n  };\n\n  const mergeData = (postsData, commentsData, usersData) => postsData.map(\n    post => ({\n      ...post,\n      user: usersData.find(user => user.id === post.userId),\n      comments: commentsData.filter(comment => comment.postId === post.id),\n    })\n  );\n\n  const postSearch = () => posts.filter(\n    ({ title, body }) => (title + body).toLowerCase().includes(query),\n  );\n\n  if (isLoading) {\n    return <p className=\"loading\">Loading...</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!isLoading && posts.length !== 0\n        ? (\n          <>\n            <Search\n              className=\"search\"\n              type=\"search\"\n              debounceTimeout={500}\n              placeholder=\"search\"\n              onChange={({ target }) => {\n                setQuery(target.value.trim().toLowerCase());\n              }}\n            />\n            <PostsPage posts={postSearch()} />\n          </>\n        )\n        : (\n          <button\n            type=\"button\"\n            className=\"post__button\"\n            onClick={loadData}\n          >\n            Load\n          </button>\n        )\n      }\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropsTypes.arrayOf.isRequired,\n  isLoading: PropsTypes.bool.isRequired,\n  query: PropsTypes.string.isRequired,\n  setPosts: PropsTypes.func.isRequired,\n  setIsLoading: PropsTypes.func.isRequired,\n  setQuery: PropsTypes.func.isRequired,\n};\n\nexport default PostList;\n","const API_POSTS = 'https://jsonplaceholder.typicode.com/posts';\nconst API_COMMENTS = 'https://jsonplaceholder.typicode.com/comments';\nconst API_USERS = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getPostsFromServer = () => (\n  fetch(API_POSTS).then(response => response.json())\n);\n\nexport const getCommentsFromServer = () => (\n  fetch(API_COMMENTS).then(response => response.json())\n);\n\nexport const getUsersFromServer = () => (\n  fetch(API_USERS).then(response => response.json())\n);\n","import { connect } from 'react-redux';\nimport { setPosts } from '../store/posts';\nimport { setIsLoading } from '../store/loading';\nimport { setQuery } from '../store/search';\n\nimport { getPosts, getIsLoading, getQuery } from '../store/index';\n\nimport PostList from './PostList';\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  isLoading: getIsLoading(state),\n  query: getQuery(state),\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    setPosts, setIsLoading, setQuery,\n  }\n)(PostList);\n","import React from 'react';\nimport './App.css';\n\nimport PostList from './PostList/index';\n\nconst App = () => (\n  <PostList />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}